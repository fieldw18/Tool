name: Convert Loon to Egern

on:
  push:
    paths:
      - 'Tool/Loon/Plugin/*.plugin'
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Convert Loon plugins to Egern modules
        run: |
          LOON_INPUT_DIR="Tool/Loon/Plugin"
          EGERN_OUTPUT_DIR="Tool/Egern/Module"

          mkdir -p "$EGERN_OUTPUT_DIR"

          CURRENT_DATE=$(date '+%Y-%m-%d %H:%M:%S')

          for file in "$LOON_INPUT_DIR"/*.plugin; do
            if [ -f "$file" ]; then
              echo "正在处理: $file"
              base_name=$(basename "$file" .plugin)
              output_file="$EGERN_OUTPUT_DIR/$base_name.yaml"

              echo "# Converted from Loon to Egern by GitHub Actions" > "$output_file"
              echo "# Date: $CURRENT_DATE" >> "$output_file"

              # 提取头部信息
              name=$(grep '^#!name=' "$file" | sed 's/#!name=//')
              desc=$(grep '^#!desc=' "$file" | sed 's/#!desc=//')
              author=$(grep '^#!author=' "$file" | sed 's/#!author=//')
              icon=$(grep '^#!icon=' "$file" | sed 's/#!icon=//')
              open_url=$(grep '^#!openUrl=' "$file" | sed 's/#!openUrl=//')

              [ -n "$name" ] && echo "name: $name" >> "$output_file"
              [ -n "$desc" ] && echo "description: $desc" >> "$output_file"
              [ -n "$author" ] && echo "author: $author" >> "$output_file"
              [ -n "$icon" ] && echo "icon: $icon" >> "$output_file"
              [ -n "$open_url" ] && echo "open_url: $open_url" >> "$output_file"
              echo "" >> "$output_file"

              # 处理 scriptings
              if grep -q '^http-response' "$file"; then
                echo "scriptings:" >> "$output_file"
                grep '^http-response' "$file" | while IFS= read -r line; do
                  if [[ "$line" =~ ^http-response[[:space:]]+([^[:space:]]+)[[:space:]]+script-path[[:space:]]*=[[:space:]]*([^[:space:]]+),.*requires-body[[:space:]]*=[[:space:]]*(true|false),.*timeout[[:space:]]*=[[:space:]]*([0-9]+),.*tag[[:space:]]*=[[:space:]]*(.+)$ ]]; then
                    match="${BASH_REMATCH[1]}"
                    script_url="${BASH_REMATCH[2]}"
                    body_required="${BASH_REMATCH[3]}"
                    timeout="${BASH_REMATCH[4]}"
                    tag="${BASH_REMATCH[5]}"
                    echo "  - http_response:" >> "$output_file"
                    echo "      name: $tag" >> "$output_file"
                    echo "      match: $match" >> "$output_file"
                    echo "      script_url: $script_url" >> "$output_file"
                    echo "      body_required: $body_required" >> "$output_file"
                    echo "      timeout: $timeout" >> "$output_file"
                  fi
                done
              fi

              # 处理 body_rewrites
              if grep -q 'response-body-json-jq' "$file"; then
                echo "body_rewrites:" >> "$output_file"
                grep '^[^#].*response-body-json-jq' "$file" | while IFS= read -r line; do
                  if [[ "$line" =~ ^([^[:space:]]+)[[:space:]]+response-body-json-jq[[:space:]]+(.+)$ ]]; then
                    match="${BASH_REMATCH[1]}"
                    filter="${BASH_REMATCH[2]}"
                    echo "  - response_jq:" >> "$output_file"
                    echo "      match: $match" >> "$output_file"
                    echo "      filter: $filter" >> "$output_file"
                  fi
                done
              fi

              # 处理 rule 规则
              if grep -q '^RULE' "$file"; then
                echo "rules:" >> "$output_file"
                grep '^RULE' "$file" | while IFS= read -r line; do
                  rule_content=$(echo "$line" | sed 's/^RULE[[:space:]]*//')
                  echo "  - $rule_content" >> "$output_file"
                done
              fi

              # 处理 map_local 规则
              if grep -q '^MAP-LOCAL' "$file"; then
                echo "map_local:" >> "$output_file"
                grep '^MAP-LOCAL' "$file" | while IFS= read -r line; do
                  map_content=$(echo "$line" | sed 's/^MAP-LOCAL[[:space:]]*//')
                  echo "  - $map_content" >> "$output_file"
                done
              fi

              # 处理 mitm 规则
              if grep -q '^MITM' "$file"; then
                echo "mitm:" >> "$output_file"
                grep '^MITM' "$file" | while IFS= read -r line; do
                  mitm_content=$(echo "$line" | sed 's/^MITM[[:space:]]*//')
                  echo "  - $mitm_content" >> "$output_file"
                done
              fi

              echo "转换完成: $output_file"
            else
              echo "$file 未找到，跳过。"
            fi
          done

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add Tool/Egern/Module/*.yaml
          git diff --quiet && git diff --staged --quiet || git commit -m "Auto-convert Loon to Egern modules"
          git push